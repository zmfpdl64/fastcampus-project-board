plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.fastcampus'
version = 'v1.1'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
//
//ext {
//	set('springCloudVersion', "2021.0.5")
//}


dependencies {
	//엑츄에이터
//	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//springdoc
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.14' //swagger-ui
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.14' //data-rest 의 api를 swagger api가 잡을 수 있게 해줌
	annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.15.0' // javadoc문서로 설명글 추가 가능

	//jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.springframework.security:spring-security-test'

	//타임리프
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	//web start
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//hal rest api helper
	implementation 'org.springframework.data:spring-data-rest-hal-explorer' //rest-api를 사용하기 쉽게 만드는 라이브러리
	//데이터 레포지토리
	implementation 'org.springframework.boot:spring-boot-starter-data-rest' //rest-api를 테스트할 수 있게 해주는 라이브러리

	//getter setter helper
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'


	//내부 db
	runtimeOnly 'com.h2database:h2'
	//마이sql db
	runtimeOnly 'mysql:mysql-connector-java'
	runtimeOnly 'org.postgresql:postgresql'
	//데이터 암호화 Vault
//	implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'

	//사용자 지정 yaml 설정
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	//스타터
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//동작 helper
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	//인증 oauth
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// queryDSL 설정
	implementation 'com.querydsl:querydsl-jpa'
	implementation 'com.querydsl:querydsl-core'
	implementation 'com.querydsl:querydsl-collections'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"	// java.lang.NoClassDfFoundError (javax.annotation.Generated) 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드

}

//dependencyManagement {
//	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//	}
//}


tasks.named('test') {
	useJUnitPlatform()
}

// querydsl 설정부
def generated  = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

jar {
		manifest {
			attributes('Main-Class': 'com.fastcampus.projectboard.FastCampusProjectBoardApplication')
		}
}